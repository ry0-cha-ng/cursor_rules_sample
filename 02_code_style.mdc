---
description: "コードスタイル・命名規則・エラー処理（TypeScript/JavaScriptファイル対象）"
globs: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"]
tags: ["コードスタイル", "命名規則", "TypeScript", "パフォーマンス"]
priority: 2
auto_apply: true
---

このファイルを参照したら「コードスタイル規約確認完了！」と言ってください。

## 命名規則
- ディレクトリ: ダッシュ付きの小文字（例: `components/auth-wizard`）
- コンポーネント: パスカルケース + 名前付きエクスポート
- 関数・変数: キャメルケース
- イベントハンドラー: `handle` プレフィックス（例: `handleClick`, `handleKeyDown`）
- 説明的な変数名を使用（補助動詞活用: `isLoading`, `hasError`）

## コードスタイル
- 関数型・宣言型プログラミングパターンを使用（クラスは避ける）
- 列挙型を避け、リテラル型やマップを使用
- コードの重複より反復とモジュール化を優先
- 可能な限りアーリーリターンを使用
- 必要なインポートをすべて含み、未使用インポートは削除
- 関連コンポーネントが正しくエクスポートされているか確認

## エラー処理と検証
- エラーとエッジケースは関数の先頭で処理
- 不必要なelse文は避け、if-returnパターンを使用
- ガード句で前提条件や無効状態を早期処理
- 適切なエラーログとユーザーフレンドリーなエラーメッセージを実装
- カスタムエラータイプやエラーファクトリの使用を検討

## TypeScript 固有
- 正確で簡潔な技術的TypeScriptコードを書く
- 型安全性を重視し、明示的な型定義を使用
- `any` の使用は避け、適切な型を定義

## パフォーマンス最適化
- `React.memo()` を適切に使用して不要な再レンダリングを防ぐ
- `useMemo()` / `useCallback()` は計算コストの高い処理にのみ使用
- 大きなリストには仮想化（React Window / React Virtualized）を検討
- 画像の遅延読み込み（lazy loading）を実装
- バンドルサイズを定期的に分析し、不要な依存関係を除去
- Tree shakingを活用してデッドコードを削除
