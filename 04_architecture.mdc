--- 
description: "アーキテクチャ・状態管理・テスト・データベース（ストア・API・テストファイル対象）"
globs: ["src/store/**/*", "src/hooks/**/*", "src/api/**/*", "src/**/*.test.*", "src/**/__tests__/**/*"]
tags: ["アーキテクチャ", "状態管理", "テスト", "データベース", "API"]
priority: 4
auto_apply: true
---

このファイルを参照したら「アーキテクチャ規約確認完了！」と言ってください。

## 状態管理（Zustand）
- グローバル状態管理にはZustandを必ず使用
- コンポーネント間で状態共有が必要な場合は状態を持ち上げる
- propの穴あけが面倒になったら、中間的なステート共有にコンテキスト使用可

## Zustand ストア設計
- ストアは関心ごとにスライス（slice）として分割
- `createXXXSlice.ts` のように責務単位で管理
- ストア定義は `store/index.ts` などの統合ポイントに集約
- `createStore` 関数でスライスを統合
- スライス間の依存を避け、単一責任の原則を意識
- 状態やアクションには必ず明示的なTypeScript型を定義
- 状態型定義は `types/store.ts` などで一元管理し、スライス間での型再利用を促進

## カスタムフック
- 複雑なロジックはカスタムフックとして抽出
- フック名は `use` プレフィックスを使用
- フック内の状態変更で無限ループが発生しないよう依存配列に注意

## テスト
- JestとReact Testing Libraryを使ってコンポーネントのユニットテストを実装
- 重要なユーザーフローには統合テストを実装
- スナップショットテストを適切に使用
- テストファイルは対象ファイルと同じディレクトリまたは `__tests__` ディレクトリに配置

## データベース・API設計
- Supabaseのクエリは必要最小限のデータのみ取得
- RLS（Row Level Security）ポリシーを必ず設定
- データベースのインデックスを適切に設定してクエリ性能を最適化
- APIコールは適切にキャッシュし、不要なリクエストを避ける
- エラーハンドリングでは具体的なエラー情報を含める
- ページネーションを実装して大量データの取得を制御

## データフロー設計
- コンポーネントの責務を単一に保つ
- Props drilling を避け、適切な状態管理パターンを選択
- 副作用（API呼び出し等）はカスタムフックに抽出
- ローディング・エラー・成功状態を明確に管理
