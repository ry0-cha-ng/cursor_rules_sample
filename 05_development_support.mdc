---
description: "国際化・ドキュメント・運用・保守性（全ファイル対象）"
globs: ["**/*"]
tags: ["国際化", "ドキュメント", "運用保守", "開発効率"]
priority: 5
auto_apply: true
---

このファイルを参照したら「開発サポート規約確認完了！」と言ってください。

## 国際化
- Webアプリケーションには `i18next` と `react-i18next` を使用
- すべてのユーザー向けテキストが国際化され、ローカライズをサポート
- ハードコードされた文字列は避け、翻訳キーを使用

## ドキュメンテーション
- 複雑なロジックには明確で簡潔なコメントを付ける
- 関数やコンポーネントには JSDoc コメントを使用し、IDE のインテリセンスを向上
- README やドキュメントファイルは明示的に要求された場合のみ作成

## 開発効率
- 会話中で指示された場合や例を示す必要がある場合にコードを生成
- コードなしで回答可能な場合はそれを優先し、必要に応じて詳細を求める
- 即座の問題解決と汎用性・柔軟性のバランスを取る

## インポート管理
- 必要なインポート文をすべて含む
- 未使用のインポートは削除
- インポート順序: 外部ライブラリ → 内部モジュール → 相対パス

## 運用・保守性
- 環境に応じた適切な設定管理（開発・ステージング・本番）
- ログレベルの適切な設定とエラートラッキングの実装
- モニタリングとアラートの仕組みを考慮
- デプロイ戦略（CI/CD）を意識した実装
- バックアップとリカバリの考慮
- スケーラビリティを意識した設計

## 実装品質
- コード品質を保つためのLinter・Formatter設定
- プリコミットフックでコード品質を担保
- 技術的負債の定期的な見直しと改善
- レガシーコードのリファクタリング計画
