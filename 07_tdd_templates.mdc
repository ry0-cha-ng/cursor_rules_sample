---
description: 
globs: 
alwaysApply: false
---
---
description: "TDDテストケース生成テンプレート集"
globs: ["**/*.test.ts", "**/*.test.tsx", "**/*.spec.ts", "**/*.spec.tsx", "**/__tests__/**/*"]
tags: ["TDD", "テンプレート", "自動生成", "t-wada"]
priority: 7
auto_apply: true
---

# TDDテストケース生成テンプレート集

このファイルを参照したら「TDDテンプレート適用開始！」と言ってください。

## 🔴 Red フェーズ: 失敗するテスト生成プロンプト

### 💡 Cursor Prompt : TDD_RED_PHASE
```
【対象】: {{ 関数名/コンポーネント名 }}
【仕様】: {{ 実装したい機能の説明 }}

以下のテンプレートに従って、失敗するテストケースを生成してください：

**正常系テストケース**
- 典型的な使用ケースでの期待動作
- 有効な入力での正常処理

**異常系テストケース**
- 不正な入力値での適切なエラーハンドリング
- null/undefined の処理
- 型違反の処理

**境界値テストケース**
- 最小値・最大値
- 空の配列・オブジェクト
- 文字列の長さ制限

**副作用テストケース**
- 状態変更の検証
- API呼び出しの確認
- イベント発火の検証

各テストケースには以下を含める：
- Given-When-Then構造
- 日本語での明確な説明
- テストデータのファクトリー使用
```

### 💡 Cursor Prompt : TDD_COMPONENT_RED
```
【対象コンポーネント】: {{ コンポーネント名 }}
【Props】: {{ プロパティの型定義 }}
【期待動作】: {{ UIの期待動作 }}

以下のReactコンポーネントテストケースを生成してください：

**レンダリングテストケース**
- 初期表示での正しいレンダリング
- Propsの正しい反映
- 条件付きレンダリング

**インタラクションテストケース**
- ユーザー操作での適切な反応
- イベントハンドラーの呼び出し
- 状態変更の反映

**アクセシビリティテストケース**
- 適切なARIA属性
- キーボード操作対応
- スクリーンリーダー対応

**エラーハンドリングテストケース**
- 不正なProps処理
- エラー境界での適切な処理
- 読み込み失敗時の表示

各テストケースは以下の構造で作成：
- describe/it の適切なネスト
- Given-When-Then コメント
- 適切なマッチャー使用
```

### 💡 Cursor Prompt : TDD_HOOK_RED
```
【対象カスタムフック】: {{ フック名 }}
【フック仕様】: {{ フックの機能説明 }}
【依存関係】: {{ 外部依存（API、状態管理など） }}

以下のカスタムフックテストケースを生成してください：

**初期状態テストケース**
- 適切な初期値の返却
- 関数の初期化状態

**状態更新テストケース**
- 状態変更関数の動作
- 非同期処理の適切な処理
- 複数状態の連携

**依存関係テストケース**
- 外部API呼び出しの模擬
- 状態管理との連携
- 副作用の適切な処理

**エラーハンドリングテストケース**
- API エラー時の適切な処理
- 不正な引数での処理
- 競合状態の処理

renderHook と act を使用した適切なテスト構造で作成してください。
```

## 🟢 Green フェーズ: 実装ガイド

### 💡 Cursor Prompt : TDD_GREEN_PHASE
```
【失敗するテスト】: {{ テストケース名 }}
【テストコード】: {{ 失敗しているテストコード }}

以下の方針で最小限の実装を行ってください：

**最小限実装原則**
- テストを通す最小限のコードのみ実装
- 過度な抽象化は避ける
- ハードコードでも許容する（Refactorフェーズで改善）

**実装順序**
1. 型定義の作成
2. 基本的な関数/コンポーネントの骨組み
3. テストを通す最小限のロジック
4. 必要最小限のエラーハンドリング

**実装チェックリスト**
- [ ] 全テストケースが通る
- [ ] TypeScriptエラーがない
- [ ] 基本的な機能が動作する
- [ ] 過度に複雑になっていない
```

## 🔵 Refactor フェーズ: 品質向上

### 💡 Cursor Prompt : TDD_REFACTOR_PHASE
```
【対象コード】: {{ ファイル名 }}
【テストケース】: {{ テストファイル名 }}

以下のリファクタリングを実施してください：

**コード品質向上**
- 重複コードの除去
- 意味のある変数名への変更
- 適切な関数分割
- 型安全性の向上

**パフォーマンス最適化**
- 不要な再レンダリング防止
- メモ化の適切な使用
- 計算量の最適化

**可読性向上**
- 適切なコメント追加
- 関数の責務明確化
- 一貫性のあるコーディングスタイル

**テストの保守性**
- テストコードの重複除去
- 共通テストユーティリティの作成
- テストデータの管理改善

**リファクタリング後のチェックリスト**
- [ ] 全テストケースが通る
- [ ] テストカバレッジが維持される
- [ ] パフォーマンス劣化がない
- [ ] 可読性が向上している
```

## 📊 テストカバレッジ分析

### 💡 Cursor Prompt : TDD_COVERAGE_ANALYSIS
```
【対象ファイル】: {{ ファイル名 }}
【現在のカバレッジ】: {{ カバレッジ状況 }}

以下の分析とテストケース追加を行ってください：

**カバレッジ分析**
- 行カバレッジ: 目標90%以上
- 分岐カバレッジ: 目標85%以上
- 関数カバレッジ: 目標95%以上

**不足テストケース特定**
- 実行されていないコードパス
- テストされていない条件分岐
- 例外処理のテスト不足

**追加テストケース生成**
- 特定された未テスト箇所
- エッジケースの追加
- 統合テストの必要性

**テスト品質評価**
- テストの意図明確性
- False Positive の可能性
- テストの安定性
```

## 🔄 継続的品質向上

### 💡 Cursor Prompt : TDD_CONTINUOUS_IMPROVEMENT
```
【プロジェクト】: {{ プロジェクト名 }}
【期間】: {{ 分析期間 }}

以下の継続的改善を実施してください：

**テストコード品質監査**
- 重複テストの特定
- テスト実行時間の分析
- 不安定なテスト（Flaky Test）の特定

**テストパターン標準化**
- 共通テストパターンの抽出
- テストユーティリティの整備
- テストデータ管理の改善

**開発効率分析**
- TDD実践による開発速度への影響
- バグ発見・修正コストの測定
- チーム間でのTDD実践度合い

**改善提案**
- テストフレームワークの最適化
- CI/CDパイプラインでのテスト実行改善
- 開発チームへのTDD教育

**実践レポート生成**
- テストカバレッジ推移
- 品質指標（バグ率、修正時間等）
- TDD実践によるROI分析
```

## 🎯 実践的テストケース例

### ユーティリティ関数のテストケース例
```typescript
// テストファクトリー
const createTestData = (overrides = {}) => ({
  value: 'test',
  count: 1,
  active: true,
  ...overrides
});

describe('ユーティリティ関数', () => {
  describe('正常系において', () => {
    it('有効な入力値の場合、期待される結果を返す', () => {
      // Given
      const input = createTestData();
      
      // When
      const result = targetFunction(input);
      
      // Then
      expect(result).toEqual(expectedOutput);
    });
  });

  describe('異常系において', () => {
    it('null値の場合、デフォルト値を返す', () => {
      // Given
      const input = null;
      
      // When
      const result = targetFunction(input);
      
      // Then
      expect(result).toBe(defaultValue);
    });
  });
});
```

### React コンポーネントのテストケース例
```typescript
describe('TestComponent', () => {
  const defaultProps = {
    title: 'テストタイトル',
    onClick: jest.fn(),
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('初期表示において', () => {
    it('渡されたpropsが正しく表示される', () => {
      // Given
      const props = defaultProps;
      
      // When
      render(<TestComponent {...props} />);
      
      // Then
      expect(screen.getByText(props.title)).toBeInTheDocument();
    });
  });
});
```

## 📝 実装チェックリスト

### TDD実践チェックリスト
- [ ] Red-Green-Refactorサイクルを遵守
- [ ] テストファースト開発を実践
- [ ] Given-When-Then構造を使用
- [ ] 適切なテストケース分類を実施
- [ ] 意味のあるテストケース名を使用
- [ ] テストデータファクトリーを活用
- [ ] モックとスタブを適切に使用
- [ ] テストカバレッジ目標を達成
- [ ] テストコードの保守性を確保
- [ ] 継続的な品質改善を実施
